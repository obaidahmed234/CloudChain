<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Text1" xml:space="preserve">
    <value>ایچ ٹی ایم ایل کا تعارف (ہائپر ٹیکسٹ مارکاپ زبان)</value>
  </data>
  <data name="Text2" xml:space="preserve">
    <value>ایچ ٹی ایم ایل، یا ہایپر ٹیکسٹ مارکاپ زبان، سب سے زیادہ وسیع پیمانے پر استعمال کیا جاتا زبان onWeb ہے. ، اس کا نام سے پتہ چلتا ہے
واقعی آپ کو مارک اپ کے اس پار آئے، اگرچہ ایچ ٹی ایم ایل، پیچیدہ لگتی ہے جس میں ایک مارکاپ زبان ہے،
ہر روز. مارکاپ آپ اس خاص معنی دینے کے لئے ایک دستاویز میں شامل کچھ ہے؛ مثال کے طور پر،
آپ کو ایک نمایاں قلم کا استعمال کرتے وقت آپ کو ایک دستاویز کو نشان ہیں. آپ کو ایک دستاویز کو نشان کر رہے ہیں
ویب کے لئے، آپ کو شامل کر رہے ہیں خاص معنی دستاویز کی ساخت، اور مارک اپ کی طرف اشارہ کرتا
دستاویز کی طرف اشارہ کرتا ہے جو حصہ، ایک ٹیبل میں تعلق رکھتا ہے کیا حصوں پیرا ہیں جس میں ایک عنوان ہے،
اور اسی طرح. کے نتیجے میں اس مارکاپ مناسب طریقے سے آپ دستاویز ظاہر کرنے کے لئے ایک ویب براؤزر کی اجازت دیتا ہے.</value>
  </data>
  <data name="Text3" xml:space="preserve">
    <value>متعارف سی ایس ایس (جھرن کاری سٹائل شیٹ)</value>
  </data>
  <data name="Text4" xml:space="preserve">
    <value>کے ورژن 4 جاری وقت، یہ ساہتیک سٹائل بھی شامل ہے سے دور منتقل کرنے کا فیصلہ کیا تھا
ایچ ٹی ایم ایل میں مارک اپ کی بجائے سٹائل دستاویزات کے جھرن کاری کہا جاتا ہے جس کے ساتھ ایک علیحدہ زبان کو پیدا کیا اور
سٹائل شیٹس یا سی ایس ایس. سی ایس ایس ایک دستاویز عناصر کی بجائے (ظاہر ہو جانی چاہئے کہ کس طرح کا کہنا ہے کہ قواعد استعمال کرتا ہے اور
) اوصاف.</value>
  </data>
  <data name="Text5" xml:space="preserve">
    <value>متعارف XML (توسیع مارکاپ زبان)</value>
  </data>
  <data name="Text6" xml:space="preserve">
    <value>نام کے سامنے میں ایکس ایک نئی زبان بلایا XML (توسیع مارکاپ زبان) کی طرف سے آیا،
جس میں پروگرامنگ کے تمام پہلوؤں میں بڑی مقبولیت حاصل کر لی ہے. XML آپ کو کرنے کے لئے استعمال کر سکتے ہیں ایک زبان ہے
اپنی خود کی مارکاپ زبانوں تشکیل دے، اور اس وجہ سے یہ فیصلہ کیا گیا ہے کہ ایچ ٹی ایم ایل کے نئے ورژن
(ہایپر ٹیکسٹ مارکاپ زبان) XML میں لکھا جانا چاہئے.</value>
  </data>
</root>